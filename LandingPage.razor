@inject ISnackbar Snackbar
<MudThemeProvider IsDarkMode="true" />
<MudDialogProvider />
<MudSnackbarProvider />


<MudLayout>
    <MudMainContent Class="pt-0 ">
        <MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary">
            <MudTabPanel Text="Intro & Display Images From File">
                <FluxEstates.RazorFiles.Intro />
            </MudTabPanel>
            <MudTabPanel Text="Add New Estate Object" Disabled="!showdata">
                <FluxEstates.RazorFiles.EstateObjectEdit />
            </MudTabPanel>
            <MudTabPanel Text="Saved Estates" Disabled="!showdata">
                <FluxEstates.RazorFiles.SavedEstates />
            </MudTabPanel>
            <MudTabPanel Text="Loader" Disabled="!showdata">
                <FluxEstates.RazorFiles.Loader />
            </MudTabPanel>
        </MudTabs>
    </MudMainContent>
</MudLayout>
@code {

    bool showdata;

    protected override async Task OnInitializedAsync()
    {
        showdata = true;
    }


    async Task ToanAction()
    {

    }

    public string MagicalProductNameCreator(int requestedLength)
    {
        Random rnd = new Random();
        string[] consonants = { "b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z" };
        string[] vowels = { "a", "e", "i", "o", "u" };

        string word = "";

        if (requestedLength == 1)
        {
            word = GetRandomLetter(rnd, vowels);
        }
        else
        {
            for (int i = 0; i < requestedLength; i += 2)
            {
                word += GetRandomLetter(rnd, consonants) + GetRandomLetter(rnd, vowels);
            }

            word = word.Replace("q", "qu").Substring(0, requestedLength); // We may generate a string longer than requested length, but it doesn't matter if cut off the excess.
        }

        return word;
    }
    private static string GetRandomLetter(Random rnd, string[] letters)
    {
        return letters[rnd.Next(0, letters.Length - 1)];
    }
}